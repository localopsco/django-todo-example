
# Gateway Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  selector:
    matchLabels:
      app: gateway-template
  template:
    metadata:
      labels:
        app: gateway-template
    spec:
      containers:
        - name: gateway-container
          image: '{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}'
          {{- if .Values.gateway.image.pullPolicy }}
          imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
          {{- end }}
          ports:
            - name: gateway
              containerPort: {{ .Values.service.targetPort }}
          volumeMounts:
            - name: nginx-configmap
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-configmap
          configMap:
            name: gateway-configmap

---

# Frontend Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fe-deployment
spec:
  replicas: {{ .Values.fe.replicaCount }}
  selector:
    matchLabels:
      app: fe-template
  template:
    metadata:
      labels:
        app: fe-template
    spec:
      containers:
        - name: fe-container
          image: "{{ .Values.fe.image.repository }}:{{ .Values.fe.image.tag }}"
          {{- if .Values.fe.image.pullPolicy }}
          imagePullPolicy: {{ .Values.fe.image.pullPolicy }}
          {{- end }}
          env:
            - name: PORT
              value: "{{ .Values.fe.service.targetPort }}"
{{ toYaml .Values.fe.env | indent 12 }}
          ports:
            - name: fe
              containerPort: {{ .Values.fe.service.targetPort }}

---

# Backend Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: be-deployment
spec:
  replicas: {{ .Values.be.replicaCount }}
  selector:
    matchLabels:
      app: be-template
  template:
    metadata:
      labels:
        app: be-template
    spec:
      containers:
        - name: be-container
          image: "{{ .Values.be.image.repository }}:{{ .Values.be.image.tag }}"
          {{- if .Values.be.image.pullPolicy }}
          imagePullPolicy: {{ .Values.be.image.pullPolicy }}
          {{- end }}
          env:
            - name: PORT
              value: "{{ .Values.be.service.targetPort }}"
            - name: APP_VERSION
              value: "{{ .Chart.AppVersion }}"
            - name: DB_HOST
              value: {{ include "postgresql.host" . | quote }}
            - name: DB_PORT
              value: "{{ .Values.postgresql.primary.service.port }}"
            - name: DB_NAME
              value: "{{ .Values.postgresql.auth.database }}"
            - name: DB_USER
              value: "{{ .Values.postgresql.auth.username }}"
            - name: DB_PASS
              value: "{{ .Values.postgresql.auth.password }}"
            - name: S3_ENABLED
              value: "{{ .Values.s3.enabled }}"
            {{- if .Values.s3.enabled }}
            - name: S3_REGION
              value: "{{ .Values.s3.region }}"
            - name: S3_BUCKET_NAME
              value: "{{ .Values.s3.bucket }}"
            {{- end }}
            - name: LOPS_HELM_VALUES
              value: {{ .Values.localops | toJson | quote }}
{{ toYaml .Values.be.env | indent 12 }}
          ports:
            - name: be
              containerPort: {{ .Values.be.service.targetPort }}
      initContainers:
      - name: check-db-ready
        image: postgres:14.8-alpine3.18
        env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.host" . | quote }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgresql.primary.service.port }}"
        command: ['sh', '-c',
          'echo Checking if postgres is up; until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT;
          do echo Waiting for postgres database to be up...; sleep 2; done; echo Postgres is up!']
